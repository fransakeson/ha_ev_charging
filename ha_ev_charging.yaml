# https://github.com/fransakeson/ha_ev_charging
# 
# The following entities need to be changed to match your setup
#
# Nordpool entity:
# sensor.nordpool_kwh_se4_sek_3_10_025 - nordpool price sensor
#
# Charger entities:
# sensor.ehnyvjcv_status - Charger status, check strings to match
# state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT3') - charger phase 1 in ampere 
# state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT4') - charger phase 2 in ampere
# state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT5') - charger phase 3 in ampere
#
# Electricity meter entities:
# states('sensor.l1_amp') - circuit phase 1 load in ampere
# states('sensor.l1_amp') - circuit phase 2 load in ampere
# states('sensor.l1_amp') - circuit phase 3 load in ampere
#
# Car entities:
# states('number.id_4_target_state_of_charge') - Target SoC in percent 
# states('sensor.id_4_state_of_charge') - Current SoC in percent
#
# Check the 'turn on charger' and 'turn off charger' automations to match your charger's integration
# Check 'Set_ev_charger_amps' automation to match your charger's dynamic control
#

sensor:
  - platform: template
    sensors:
      # Set your car's battery size in kWh
      car_battery_capacity:
        value_template: 78
      # Guesstimate of average charging power in kW
      average_charging_power:
        value_template: 9
      # Max load allowed for circuit fuses in ampere (with some margin, e.g. I have 25 A per phase and set max to 24)
      max_load_circuit:
        value_template: 24
      # Max load allowed for charger in ampere
      max_load_charger:
        value_template: 16

      # Find the cheapest period based on number of hours needed to charge
      cheapest_sequential_spot_hours_input:
        device_class: timestamp
        friendly_name: "Cheapest sequential hours"
        value_template: >
          {%- set numberOfSequentialHours = states('input_number.car_needed_hours') | int(0) -%}
          {%- set firstHour = ((as_timestamp(now() ) | timestamp_custom('%H')) | int(0) ) -%} 
          {%- set readyHour = as_timestamp(strptime(states('input_datetime.car_ready_at'),"%H:%M:%S"))|timestamp_custom('%H')|int(0) -%}
          {%- set nowHour = as_timestamp(now(),"%H:%M:%S")|timestamp_custom('%H')|int(0) -%}
          {%- if readyHour < nowHour and state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'tomorrow_valid') == true and 
              state_attr("sensor.nordpool_kwh_se4_sek_3_10_025", "tomorrow") [1] is number == true -%}
            {%- set lastHour= 25 + as_timestamp(strptime(states('input_datetime.car_ready_at'),"%H:%M:%S")) | timestamp_custom('%H') | int(0) -%}
          {% elif readyHour < nowHour %}
            {% set lastHour = 24 %}
          {% else %}
            {%- set lastHour = as_timestamp(strptime(states('input_datetime.car_ready_at'),"%H:%M:%S")) | timestamp_custom('%H') | int(0) -%}
          {% endif %}
          {%- if state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'tomorrow_valid') == true and 
              state_attr("sensor.nordpool_kwh_se4_sek_3_10_025", "tomorrow") [1] is number == true -%}
            {%- set ns = namespace(counter=0, list=[], cheapestHour=today_at("00:00") + timedelta( hours = (24)), cheapestPrice=999.00) -%}
            {%- for i in range(firstHour, lastHour ) -%}
              {%- set ns.counter = 0.0 -%}
              {%- for j in range(i-numberOfSequentialHours, i) -%}
                {%- if j < 24 -%}
                  {%- set ns.counter = ns.counter + state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'today')[j] -%}
                {%- else -%}
                  {%- set ns.counter = ns.counter + state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'tomorrow')[j-24] -%}
                {%- endif -%}
              {%- endfor -%}
              {%- set ns.list = ns.list + [ns.counter] -%}
              {%- if ns.counter < ns.cheapestPrice -%}
                {%- set ns.cheapestPrice = ns.counter -%}
                {%- set ns.cheapestHour = today_at("00:00") + timedelta( hours = (i - numberOfSequentialHours )) -%}
              {%- endif -%}
            {%- endfor -%}
            {{ ns.cheapestHour }}
          {%- else -%}
            {%- set ns = namespace(counter=0, list=[], cheapestHour=today_at("00:00") + timedelta( hours = (24)), cheapestPrice=999.00) -%}
            {%- for i in range(firstHour + numberOfSequentialHours, lastHour + 1) -%}
              {%- set ns.counter = 0.0 -%}
              {%- for j in range(i-numberOfSequentialHours, i) -%}
                {%- set ns.counter = ns.counter + state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'today')[j] -%}
              {%- endfor -%}
              {%- set ns.list = ns.list + [ns.counter] -%}
              {%- if ns.counter < ns.cheapestPrice -%}
                {%- set ns.cheapestPrice = ns.counter -%}
                {%- set ns.cheapestHour = today_at("00:00") + timedelta( hours = (i - numberOfSequentialHours )) -%}
              {%- endif -%}
            {%- endfor -%}
            {{ ns.cheapestHour }}
          {%- endif -%}

      # Calculate mean hourly price for startTime to endTime
      charging_mean_price: 
        friendly_name: "Mean price"
        unit_of_measurement: 'SEK/kWh'
        value_template: >
          {%- set startHour = as_timestamp(strptime(states('input_datetime.device_start_time'),"%H:%M:%S"))|timestamp_custom('%H')|int(0) -%}
          {%- set endHour = as_timestamp(strptime(states('input_datetime.device_end_time'),"%H:%M:%S"))|timestamp_custom('%H')|int(0) -%}
          {%- set nowHour = as_timestamp(now(),"%H:%M:%S")|timestamp_custom('%H')|int(0) -%}
          {% if endHour == 0 %} 
            {% set endHour = 24 %} 
          {% endif %}     
          {% if startHour >= nowHour %} 
            {% set sd = 'raw_today' %}
          {% else %}
            {% set sd = 'raw_tomorrow' %}
          {% endif %}
          {% if endHour < startHour %}
            {% set ed = 'raw_tomorrow' %}
          {% else %}
            {% set ed = sd %}
          {% endif %}
          {%- set ns = namespace(counter=0) %} 
          {% if sd == ed %}
            {% set data = namespace(value=[]) %}
            {% set l=state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', sd) %}
            {%- for item in l[startHour:endHour] %}
              {% set data.value = data.value + [item] %}
              {%- set ns.counter = ns.counter + 1 %}
            {%- endfor %}
            {%- if ns.counter > 0 -%}
              {{ ("%.3f"|format(data.value| sum(attribute='value'))|float(0)/ns.counter) | round(3) }}
            {% else %}
              Unknown
            {%- endif %}
          {% elif state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', 'tomorrow_valid') == true and 
              state_attr("sensor.nordpool_kwh_se4_sek_3_10_025", "tomorrow") [1] is number == true  %}
            {% set data = namespace(value=[]) %}
            {% set l=state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', sd) %}
            {%- for item in l[startHour:24] %}
              {% set data.value = data.value + [item] %}
              {%- set ns.counter = ns.counter + 1 %}
            {%- endfor %}
            {% set l=state_attr('sensor.nordpool_kwh_se4_sek_3_10_025', ed) %}
            {%- for item in l[0:endHour] %}
              {% set data.value = data.value + [item] %}
              {%- set ns.counter = ns.counter + 1 %}
            {%- endfor %}
            {%- if ns.counter > 0 -%}
              {{ ("%.3f"|format(data.value| sum(attribute='value'))|float(0)/ns.counter) | round(3) }}
            {% else %}
              Unknown
            {% endif %}
          {% else %}
            Unknown
          {% endif %}

      # Calculate load available to the charger
      charger_l1_available:
        friendly_name: "Charger L1 available"
        unit_of_measurement: 'A'
        value_template: >
          {% set old_a = ( states('sensor.charger_l1_available') | int(0) ) %}
          {% set a = (state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT3') |float(0) +
              (states('sensor.max_load_circuit') | float - states('sensor.l1_amp') | float) | round(0,'floor')) | int(0) %}
          {% if a > states('sensor.max_load_charger') | int(0) %}
            {% set a = states('sensor.max_load_charger') | int(0) %}
          {% endif %}
          {% if a < 1 %}
            {% set a = 1 %}
          {% endif %}
          {% if a < old_a %}
            {{ a }}
          {% elif a > old_a and states('timer.charger_timer_amps') != 'active' %}
            {{ a }}
          {% else %}
            {{ old_a }}
          {% endif %}
      charger_l2_available:
        friendly_name: "Charger L2 available"
        unit_of_measurement: 'A'
        value_template: >
          {% set old_a = ( states('sensor.charger_l2_available') | int(0) ) %}
          {% set a = (state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT4') |float(0) +
              (states('sensor.max_load_circuit') | float - states('sensor.l2_amp') | float) | round(0,'floor')) | int(0) %}
          {% if a > states('sensor.max_load_charger') | int(0) %}
            {% set a = states('sensor.max_load_charger') | int(0) %}
          {% endif %}
          {% if a < 1 %}
            {% set a = 1 %}
          {% endif %}
          {% if a < old_a %}
            {{ a }}
          {% elif a > old_a and states('timer.charger_timer_amps') != 'active' %}
            {{ a }}
          {% else %}
            {{ old_a }}
          {% endif %}
      charger_l3_available:
        friendly_name: "Charger L3 available"
        unit_of_measurement: 'A'
        value_template: >
          {% set old_a = ( states('sensor.charger_l3_available') | int(0) ) %}
          {% set a = (state_attr('sensor.ehnyvjcv_current', 'state_inCurrentT5') |float(0) + 
              (states('sensor.max_load_circuit') | float - states('sensor.l3_amp') | float) | round(0,'floor')) | int(0) %}
          {% if a > states('sensor.max_load_charger') | int(0) %}
            {% set a = states('sensor.max_load_charger') | int(0) %}
          {% endif %}
          {% if a < 1 %}
            {% set a = 1 %}
          {% endif %}
          {% if a < old_a %}
            {{ a }}
          {% elif a > old_a and states('timer.charger_timer_amps') != 'active' %}
            {{ a }}
          {% else %}
            {{ old_a }}
          {% endif %}

# Helpers for start- and end time
input_datetime:
  device_start_time:
    name: Charge Start Time
    has_time: true
    has_date: false
  device_end_time:
    name: Charge End Time
    has_time: true
    has_date: false
  car_ready_at:
    name: Car ready time
    has_time: true
    has_date: false

# Selector for charging modes
input_select:
  car_charge_mode:
    name: Charger mode
    options:
      - Schedule
      - SoC
    initial: Schedule
    icon: mdi:car-battery

# Switches
input_boolean:
  car_load_balance:
    name: Load balancing
  car_smart_charging:
    name: Smart charging
  charger_run:
    name: Charge

# Input numbers
input_number:
  car_needed_hours:
    name: Hours needed
    max: 100
    min: 0
    mode: box
  # Local target SoC to workaround buggy wecharge
  car_local_target_soc:
    name: SoC Target
    max: 100
    min: 50
    step: 10
    mode: slider

# Timer for cooldown period after charger amps have been changed. Only relevant when increasing amp
timer:
  charger_timer_amps:
    duration: 60
    name: Load balance timer

# Script to pause charger instead of stopping as stopping ends the session
script:    
  charger_resume:
    alias: charger_resume
    sequence:
    - service: easee.set_charger_dynamic_limit
      data:
        charger_id: EHNYVJCV
        current: 7
      enabled: true
    - service: easee.set_circuit_dynamic_limit
      data:
        circuit_id: 384858
        currentP1: 7
        currentP2: 7
        currentP3: 7
      enabled: true
    - service: easee.resume
      data:
        charger_id: EHNYVJCV
    mode: single
    icon: mdi:play-circle-outline

# Start cooldown timer
automation:
  - id: '1662198489322'
    alias: 'Start amp timer'
    description: ''
    trigger:
      - platform: state
        entity_id: sensor.charger_l1_available
      - platform: state
        entity_id: sensor.charger_l2_available
      - platform: state
        entity_id: sensor.charger_l3_available
      - platform: state
        entity_id: input_boolean.charger_run
        to: 'on'
    condition:
      - condition: state
        entity_id: timer.charger_timer_amps
        state: idle
      - condition: state
        entity_id: input_boolean.charger_run
        state: 'on'
    action:
      - service: timer.start
        entity_id: timer.charger_timer_amps

  - id: '1663398489322'
    alias: 'Set end/start time for SoC mode'
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.ehnyvjcv_status
      to: 'awaiting_start'
    - platform: state
      entity_id: input_select.car_charge_mode
      to: 'SoC'
    - platform: state
      entity_id: input_number.car_local_target_soc
    condition: []
    action:
    - service: input_number.set_value
      data:
        value: "{{ ((( ( states('input_number.car_local_target_soc') | float(1) - 
            states('sensor.id_4_state_of_charge') | float(1) ) /100) * states('sensor.car_battery_capacity') | int(0) ) / 
            states('sensor.average_charging_power') | int(1) ) | round(0,'ceil') }}"
      target:
        entity_id: input_number.car_needed_hours
    - service: input_datetime.set_datetime
      data:
        time: "{{ as_timestamp(states('sensor.cheapest_sequential_spot_hours_input')) | timestamp_custom('%H:%M') }}"
      target:
        entity_id: input_datetime.device_start_time
    - service: input_datetime.set_datetime
      data:
        time: "{{ ((as_timestamp(states('sensor.cheapest_sequential_spot_hours_input')) + 
            (3600* states('input_number.car_needed_hours')|int(0) )) | timestamp_custom('%H:%M')) }}"
      target:
        entity_id: input_datetime.device_end_time
    mode: single

  # Set needed hours in Schedule mode
  - id: '1663398489323'
    alias: 'Set needed hours for Schedule mode'
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.ehnyvjcv_status
      to: 'awaiting_start'
    - platform: state
      entity_id: input_select.car_charge_mode
      to: 'Schedule'
    - platform: state
      entity_id: input_datetime.device_start_time
    - platform: state
      entity_id: input_datetime.device_end_time
    condition:
    - condition: state
      entity_id: input_select.car_charge_mode
      state: 'Schedule'
    action:
    - service: input_number.set_value
      data:
        value: >
          {%- set startHour = as_timestamp(strptime(states('input_datetime.device_start_time'),"%H:%M:%S")) -%}
          {%- set endHour = as_timestamp(strptime(states('input_datetime.device_end_time'),"%H:%M:%S")) -%}
          {{ (endHour-startHour)|timestamp_custom('%H')|int(0)-1 }}      
      target:
        entity_id: input_number.car_needed_hours
    mode: single

  - id: '1663399614858'
    alias: Turn on switch on start time
    description: ''
    trigger:
    - platform: time
      at: input_datetime.device_start_time
    condition:
    - condition: state
      entity_id: input_boolean.car_smart_charging
      state: 'on'
    action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.charger_run
    mode: single

  - id: '1663399614818'
    alias: Turn off charger after end time - Schedule mode
    description: ''
    trigger:
    - platform: time
      at: input_datetime.device_end_time
    condition:
    - condition: state
      entity_id: input_boolean.car_smart_charging
      state: 'on'
    - condition: state
      entity_id: input_select.car_charge_mode
      state: 'Schedule'
    action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.charger_run
    mode: single

  - id: '1663799114818'
    alias: Turn off charger - SoC mode
    description: ''
    trigger:
    - platform: time
      at: input_datetime.device_end_time
    condition:
    - condition: state
      entity_id: input_boolean.car_smart_charging
      state: 'on'
    - condition: state
      entity_id: input_select.car_charge_mode
      state: 'SoC'
    - condition: template
      value_template: "{{ states('sensor.id_4_state_of_charge') | int(0) >= states('input_number.car_local_target_soc') | int(0) }}"
    action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.charger_run
    mode: single

  - id: '1663393614828'
    alias: Turn on charger
    description: ''
    trigger:
    - platform: state
      entity_id: input_boolean.charger_run
      to: 'on'
    condition: []
    action:
    - service: script.charger_resume
    - service: timer.start
      entity_id: timer.charger_timer_amps
    mode: single

  - id: '1663199614118'
    alias: Turn off charger
    description: ''
    trigger:
    - platform: state
      entity_id: input_boolean.charger_run
      to: 'off'
    condition: []
    action:
    - service: easee.pause
      data: 
        charger_id: EHNYVJCV
    - service: timer.finish
      entity_id: timer.charger_timer_amps
    mode: single

  - id: '1648389547513'
    alias: Set_ev_charger_amps
    description: Set EV charger amps
    trigger:
    - platform: state
      entity_id: sensor.charger_l1_available
    - platform: state
      entity_id: sensor.charger_l2_available
    - platform: state
      entity_id: sensor.charger_l3_available
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.charger_timer_amps
      context: {}
    condition:
    - condition: state
      entity_id: input_boolean.charger_run
      state: 'on'
    - condition: state
      entity_id: input_boolean.car_load_balance
      state: 'on'
    action: 
    - service: easee.set_circuit_dynamic_limit 
      data:
        circuit_id: 384858
        currentP1: "{{ states('sensor.charger_l1_available') | int(0) }}"
        currentP2: "{{ states('sensor.charger_l2_available') | int(0) }}"
        currentP3: "{{ states('sensor.charger_l3_available') | int(0) }}"
    mode: single
    max_exceeded: silent

  - id: '1678319547213'
    alias: Set_target_SoC
    description: Set target SoC from local setting to car setting
    trigger:
    - platform: state
      entity_id: input_number.car_local_target_soc
    condition: []
    action:
    - service: number.set_value 
      data:
        value: "{{ states('input_number.car_local_target_soc') | int(80) }}"
      target:
        entity_id: number.id_4_target_state_of_charge
    mode: single
